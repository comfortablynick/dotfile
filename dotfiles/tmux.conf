#   _                                          __
#  | |_ _ __ ___  _   ___  __  ___ ___  _ __  / _|
#  | __| '_ ` _ \| | | \ \/ / / __/ _ \| '_ \| |_
#  | |_| | | | | | |_| |>  < | (_| (_) | | | |  _|
# (_)__|_| |_| |_|\__,_/_/\_(_)___\___/|_| |_|_|
#

# General {{{
# Terminal
set-option -g default-shell /usr/local/bin/fish
# set -g default-terminal "screen-256color"       # color!
# set -ga terminal-overrides ",xterm-256color:Tc" # utf8/color hack
set -g xterm-keys on                            # auto scroll mode in xterms
set -g history-limit 5000                       # increase history

set-option -g destroy-unattached off            # keep all sessions

# Reload .tmux.conf in place
bind r source ~/.tmux.conf \; display-message "Conf reloaded..."
# }}}
# Display {{{
# numbering
set -g base-index 1                             # start windows numbering at 1
set -g renumber-windows on                      # renumber windows when a window is closed
setw -g pane-base-index 1                       # make pane numbering consistent with windows

setw -g aggressive-resize on                    # allow different client sizes

# titles
set -g set-titles on                            # set terminal title
setw -g automatic-rename on                     # rename window to reflect current program

set -g display-panes-time 800                   # slightly longer pane indicators display time
set -g display-time 1000                        # slightly longer status messages display time

set -g status-interval 2                        # redraw status line every 2 seconds

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# activity
set -g monitor-activity on
set -g visual-activity off
# }}}
# Prefix keys {{{
# Use <CTRL>+a as command prefix
unbind C-a
set -g prefix C-a
bind C-a send-prefix
# }}}
# Navigation {{{
# splitting
unbind '"'
unbind '%'
bind v split-window -h -c "#{pane_current_path}"
bind V split-window -v -c "#{pane_current_path}"

# pane resizing
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# pane vi-style navigation
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# window vi-style navigation
bind -r C-h previous-window                     # identical to `n`
bind -r C-l next-window                         # identical to `p`
bind Tab last-window                            # move to last active window

# Smart pane switching with awareness of vim splits ala http://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits
# Original concept from Mislav MarohniÄ‡, https://gist.github.com/mislav/5189704
# Simplified code from https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind -n C-o select-pane -t :.+
# }}}
# Copy mode {{{
# Vim style shortcuts
setw -g mode-keys vi
unbind [
unbind ]
bind Escape copy-mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'
# }}}
# Mouse mode {{{
set -g mouse on

# make scrolling with wheels work
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# Toggle mouse mode on or off
bind m set -g mouse on \; display 'Mouse: ON'
bind M set -g mouse off \; display 'Mouse: OFF'
# }}}
# Status bar {{{
# Powerline
# source config file (doesn't seem to be needed)
# source "/usr/local/lib/python3.7/site-packages/powerline/bindings/tmux/powerline.conf"
# run powerline-config to source automatically
run-shell "powerline-config tmux setup"
# }}}
# vim: set ft=tmux fdm=marker:
