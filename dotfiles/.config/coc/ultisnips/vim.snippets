# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
global !p
from pathlib import PurePath
def file_relative_path(path):
	"""Return path relative to .vim directory."""
	fp = PurePath(path)
	rel = fp.relative_to(os.path.expanduser("~/dotfiles/dotfiles/.vim"))
	return str(rel)
endglobal

# Author:   ${1:`!v g:snippets_author`} <${2:`!v g:snippets_author_email`}>
snippet doc "Script documetation" b
" ====================================================
" Filename:    `!p snip.rv = file_relative_path(path)`
" Description: ${1}
" Author:      Nick Murphy
" License:     MIT
" Last Change: `date -I`
" ====================================================
$0
endsnippet

# Uses unique string so guards aren't duplicated easily
snippet scriptguard "script reinclusion guard" b
if exists('${1:g:loaded_`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn)
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8)).lower()
	snip.rv = '%s_%s' % (name,rand)
else:
	snip.rv = snip.c`}') | finish | endif
let $1 = 1$3
endsnippet

snippet f "function" b
fun ${1:function_name}($2)
	${3:" code}
endf
endsnippet

snippet filetype_detect "filetype detection boilerplate" b
" vint: -ProhibitAutocmdWithNoGroup

autocmd BufRead,BufNewFile *.${1:file_ext} call s:set_$1_filetype()

function! s:set_$1_filetype() abort
    if &filetype !=# '$1'
        set filetype=$1
    endif
endfunction
endsnippet
