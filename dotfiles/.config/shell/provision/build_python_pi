#!/usr/bin/env python3
"""Build latest python from source and install.

Also install/update prerequisites via apt.
"""
import logging
import os
import platform
import subprocess
import sys

logging.basicConfig(level=logging.DEBUG)
LOG = logging.getLogger(__name__)

PY_VER = "3.7.2"

apt_packages = """
build-essential
tk-dev
libncurses5-dev
libncursesw5-dev
libreadline6-dev
libdb5.3-dev
libgdbm-dev
libsqlite3-dev
libssl-dev
libbz2-dev
libexpat1-dev
liblzma-dev
zlib1g-dev
libffi-dev
"""


def begin():
    """Start process and after user confirmation."""
    print("*" * 50)
    print("This script will download and install prerequisites")
    print("for building Python {ver}. This may take a while.\n".format(ver=PY_VER))

    response = input("Continue? Press [y/n]: ")
    LOG.debug("User responded: %s", response)

    if response[0].lower() == "y":
        print("Continuing with install...")
    else:
        sys.stderr.write("Exiting script!")
        sys.exit(1)

    # Apt install
    print("Updating apt cache...")
    subprocess.run(["sudo", "apt-get", "update"])
    pkgs = " ".join(apt_packages.strip().split("\n"))
    LOG.debug("Packages: %s", pkgs)
    print("Installing apt packages...")
    subprocess.run(["sudo", "apt-get", "install", "-y", pkgs])

    # Download Python tarball
    py_url = "https://www.python.org/ftp/python/{ver}/Python-{ver}.tar.xz".format(
        ver=PY_VER
    )
    py_dir = os.path.expanduser("~/src")
    LOG.debug("Downloading Python to %s from %s", py_dir, py_url)
    subprocess.run(["wget", "-P", py_dir, py_url])

    # Uncompress and build
    print("Uncompressing tarball...")
    subprocess.run(["tar", "xf", "Python-{ver}.tar.xz".format(ver=PY_VER)], cwd=py_dir)
    print("Building Python {ver}".format(ver=PY_VER))
    subprocess.run(
        ["./configure", "--prefix=/usr/local/opt/python-{ver}".format(ver=PY_VER)],
        cwd=py_dir,
    )
    if platform.machine().startswith("arm"):
        LOG.debug("Detected ARM cpu; using all 4 cores for build.")
        make_cmd = ["make", "-j", "4"]
    else:
        make_cmd = ["make"]
    subprocess.run(make_cmd, cwd=py_dir)

    # Install
    print("Installing Python...")
    subprocess.run(["sudo", "make", "altinstall"], cwd=py_dir)
    print("Installation complete!")


if __name__ == "__main__":
    begin()
