# vim: fdm=marker fdl=1:
#                  _                  _
#   ___ _ ____   _| |_ ___  _ __ ___ | |
#  / _ \ '_ \ \ / / __/ _ \| '_ ` _ \| |
# |  __/ | | \ V /| || (_) | | | | | | |
#  \___|_| |_|\_(_)\__\___/|_| |_| |_|_|
#
# SHELL ENVIRONMENT CONFIG
# Path {{{1
# go {{{2
[[path]]
key = ''
val = '/usr/local/go/bin'
args = '-U --path'

[[path]]
key = ''
val = '$HOME/go/bin'
args = '-Up --path'

# rust {{{2
[[path]]
key = ''
val = '$HOME/.cargo/bin'
args = '-Up --path'

# fzf {{{2
[[path]]
key = ''
val = '$HOME/.fzf/bin'
args = '-Up --path'
# host = 'thor.local'

# user directories {{{2
[[path]]
key = ''
val = '$HOME/bin'
args = '-Up --path'

[[path]]
key = ''
val = '$HOME/git/python/shell'
args = '-Up --path'

# shell directories {{{2
[[path]]
key = ''
val = '$XDG_CONFIG_HOME/bash/functions'
shell = ['bash']

[[path]]
key = ''
val = '$XDG_CONFIG_HOME/zsh/functions'
shell = ['zsh']

[[path]]
key = ''
val = '$XDG_CONFIG_HOME/shell/functions'
args = '-Up --path'
desc = 'General shell scripts common to all shells'

# node {{{2
[[path]]
key = ''
val = '$HOME/.yarn/bin'
args = '-Up --path'
desc = 'Yarn executables -- added by yarn install'

[[path]]
key = ''
val = '$XDG_CONFIG_HOME/yarn/global/node_modules/.bin'
args = '-Up --path'
desc = 'Yarn executables -- added by yarn install'

# pyenv {{{2
[[path]]
key = ''
val = '$HOME/.pyenv/bin'
args = '-Ua --path'
desc = 'Pyenv directory for user installs of Python'

[[path]]
key = ''
val = '$HOME/.pyenv/shims'
args = '-Ua --path'
desc = 'Pyenv directory for shim binaries'

[[path]]
key = ''
val = '$HOME/.pyenv/plugins/pyenv-virtualenv/shims'
args = '-Ua --path'
desc = 'Pyenv directory for virtualenv shim binaries'

# path config {{{2
# NOTE: all path entries must be defined before this line
[[env]]
key = 'PATH'
val = '''$(echo -n $PATH | awk -v RS=: -v ORS=: '!x[$0]++' | sed "s/\(.*\).\{1\}/\1/")'''
shell = ['bash','zsh']
desc = 'De-duplicate path variable'

# Environment Variables {{{1
# general system {{{2
[[env]]
key = 'XDG_CONFIG_HOME'
val = '$HOME/.config'
cat = 'system'

[[env]]
key = 'XDG_CACHE_HOME'
val = '$HOME/.cache'
cat = 'system'

[[env]]
key = 'XDG_DATA_HOME'
val = '$HOME/.local'
cat = 'system'

[[env]]
key = 'LC_ALL'
val = 'en_US.utf-8'
cat = 'system'
desc = 'Default encoding'

[[env]]
key = 'BROWSER'
val = 'w3m'
cat = 'system'
desc = 'Text-based browser'

[[env]]
key = 'CDG_PATH'
val = [
    "$HOME/git/python",
    "$HOME/dotfiles/dotfiles",
    "$HOME/.vim",
    "$HOME/.vim/config",
    "$XDG_CONFIG_HOME/fish",
    "$XDG_CONFIG_HOME/fish/functions",
    "$XDG_CONFIG_HOME/fish/completions",
    "$XDG_CONFIG_HOME/fish/conf.d",
]
cat = 'system'
shell = ['fish']
desc = 'Directories for cdg function (bookmarks)'

# preferences {{{2
[[env]]
key = 'CLICOLOR'
val = 1
cat = 'preferences'
desc = 'Use colors in prompt'

[[env]]
key = 'NERD_FONTS'
val = 1
cat = 'preferences'
desc = 'Use glyphs in Vim'

[[env]]
key = 'LS_AFTER_CD'
val = 1
cat = 'preferences'
desc = 'Use snippet in conf.d to echo dir after $PWD change'

# todo.txt {{{2
[[env]]
key = 'TODOTXT_CFG_FILE'
val = '$HOME/Dropbox/todo/todo.cfg'
cat = 'todo.txt'
desc = 'todo.txt config directory'

# lastpass cli {{{2
[[env]]
key = 'LPASS_DISABLE_PINENTRY'
val = 1
cat = 'lpass'
desc = 'disable gui prompt for password'

# fish {{{2
[[env]]
key = 'FISH_PKG_MGR'
val = 'FUNDLE'
cat = 'fish'
shell = ['fish']

[[env]]
key = 'FISH_PLUGIN_PATH'
val = '$XDG_DATA_HOME/fish_plugins'
cat = 'fish'
shell = ['fish']
desc = 'Plugin path for manual install'

[[env]]
key = 'FISH_THEME'
val = 'yimmy'
cat = 'fish'
shell = ['fish']

[[env]]
key = 'FISH_SSH_THEME'
val = 'yimmy'
cat = 'fish'
shell = ['fish']

# pyenv {{{2
[[env]]
key = 'PYENV_ROOT'
val = '$HOME/.pyenv'
cat = 'pyenv'
desc = 'Root dir for all pyenv Python installs/venvs'

[[env]]
key = 'PYENV_VERSION'
val = '3.7.2'
cat = 'pyenv'
desc = 'Global Python version to use'

[[env]]
key = 'PYENV_SHELL'
val = 'os.path.basename(os.environ.get("SHELL"))'
cat = 'pyenv'
eval = true

[[env]]
key = 'PYENV_VIRTUALENV_INIT'
val = 1
cat = 'pyenv'
desc = 'Automatically activate virtualenvs'

[[env]]
key = 'PYENV_VIRTUALENV_DISABLE_PROMPT'
val = 1
cat = 'pyenv'

[[env]]
key = 'PYTHON_CONFIGURE_OPTS'
val = '--enable-shared'
cat = 'pyenv'
desc = 'options when compiling python'

# python {{{2
[[env]]
key = 'VIRTUAL_ENV_DISABLE_PROMPT'
val = 1
cat = 'python'
shell = ['fish']
desc = 'Disable default venv prompt'

[[env]]
key = 'NVIM_PY2_DIR'
val = '$PYENV_ROOT/versions/2.7.15/envs/nvim2/bin/python'
cat = 'python'
desc = 'Neovim Python 2 venv'

[[env]]
key = 'NVIM_PY3_DIR'
val = '$PYENV_ROOT/versions/$PYENV_VERSION/envs/nvim3/bin/python'
cat = 'python'
desc = 'Neovim Python 3 venv'

# vim {{{2
[[env]]
key = 'VISUAL'
val = 'nvim'
cat = 'vim'
shell = ['bash','zsh']
desc = 'Default visual text editor'

[[env]]
key = 'EDITOR'
val = '$VISUAL'
cat = 'vim'
shell = ['bash','zsh']
desc = 'Default terminal text editor'

[[env]]
key = 'VIM_COLOR'
val = 'PaperColor-dark'
cat = 'vim'
desc = 'Vim color theme'

[[env]]
key = 'NVIM_COLOR'
val = 'PaperColor-dark'
cat = 'vim'
desc = 'Neovim color theme'

shell = ['bash', 'zsh']
# fzf {{{2

[[env]]
key = 'FZF_TMUX'
val = 1
cat = 'fzf'
desc = 'Use FZF for TMUX'

[[env]]
key = 'FZF_TMUX_HEIGHT'
val = '40%'
cat = 'fzf'
desc = 'Panel height for fzf-tmux'

[[env]]
key = 'FZF_LEGACY_KEYBINDINGS'
val = 0
cat = 'fzf'
shell = ['fish']
desc = 'Use legacy Fish FZF keybindings'

[[env]]
key = 'FZF_DEFAULT_COMMAND'
# val = 'fd --type f --hidden --follow --exclude .git'
val = 'rg --files --no-messages --hidden'
cat = 'fzf'
quote = true

[[env]]
key = 'FZF_DEFAULT_OPTS'
val = '--ansi'
cat = 'fzf'
quote = true

[[env]]
key = 'FZF_PREVIEW_OPTS'
val = """--ansi \
--preview-window 'right:60%' \
--preview 'bat --color=always --style=full --line-range :300 {} 2>/dev/null'"""
cat = 'fzf'
desc = 'Default colors and options'
quote = true

[[env]]
key = 'FZF_FIND_FILE_COMMAND'
val = '$FZF_DEFAULT_COMMAND'
cat = 'fzf'

[[env]]
key = 'FZF_FIND_FILE_OPTS'
val = '$FZF_PREVIEW_OPTS'
cat = 'fzf'

[[env]]
key = 'FZF_OPEN_COMMAND'
val = 'fd --hidden --follow --exclude .git'
cat = 'fzf'
desc = 'Command used to open files with key shortcut'
quote = true

[[env]]
key = 'FZF_OPEN_OPTS'
val = '$FZF_PREVIEW_OPTS'
cat = 'fzf'
desc = 'Options used to open files with key shortcut'

[[env]]
key = 'FZF_PREVIEW_FILE_CMD'
val = '$FZF_PREVIEW_OPTS'
cat = 'fzf'

[[env]]
key = 'FZF_PREVIEW_DIR_CMD'
val = 'exa -la --color=always'
cat = 'fzf'
quote = true

[[env]]
key = 'FZF_ENABLE_OPEN_PREVIEW'
val = '1'
cat = 'fzf'
desc = 'Use preview for file open command'

[[env]]
key = 'FZF_CD_COMMAND'
val = 'fd -H -L -t d'
cat = 'fzf'
desc = 'Used to fuzzy cd'
quote = true

[[env]]
key = 'FZF_CD_WITH_HIDDEN_COMMAND'
val = 'fd --follow --hidden --type d'
cat = 'fzf'
desc = 'Used to fuzzy cd with hidden dirs'
quote = true

[[env]]
key = 'FZF_CD_OPTS'
val = "--ansi --preview-window=right:60% --preview='$FZF_PREVIEW_DIR_CMD {}'"
cat = 'fzf'
desc = 'Display dir contents when using fzf to cd'
quote = true

# skim {{{2
[[env]]
key = 'SKIM_DEFAULT_COMMAND'
# val = 'fd --type f --hidden --follow --exclude .git'
val = 'rg --files --no-messages --hidden'
cat = 'fzf'
quote = true

# go {{{2
[[env]]
key = 'GOPATH'
val = '$HOME/go'
cat = 'go'
desc = 'golang path folder'

[[env]]
key = 'GOBIN'
val = '$HOME/go/bin'
cat = 'go'
desc = 'golang binaries'

# rust {{{2
[[env]]
key = 'CARGO_HOME'
val = '$HOME/.cargo'
cat = 'rust'
desc = 'cargo home'

# Abbreviations/Aliases {{{1
# misc apps {{{2
[[abbr]]
key = 'xo'
val = 'xonsh'
cat = 'misc'
desc = 'Open xonsh shell'

[[abbr]]
key = 'lp'
val = 'lpass'
cat = 'misc'
desc = 'LastPass cli'

[[abbr]]
key = 'vcp'
val = 'vcprompt -f "%b %r %p %u %m"'
cat = 'misc'
desc = 'Fast git status using C'
quote = true

[[abbr]]
key = 'vcpy'
val = 'vcprompt.py -f "%b %r %p %u %m"'
cat = 'misc'
desc = 'Git status using python'
quote = true

[[abbr]]
key = 'vw'
val = 'view'
cat = 'misc'
desc = 'Call view function'

[[abbr]]
key = 'z'
val = 'j'
cat = 'misc'
desc = 'Use autojump (j) instead of z'

# autocorrect {{{2
[[abbr]]
key = 'weahter'
val = 'weather'
cat = 'autocorrect'
desc = 'Correct misspelling'

# git {{{2
[[abbr]]
key = 'g'
val = 'git'
cat = 'git'

[[abbr]]
key = 'ga'
val = 'fgit add'
cat = 'git'
desc = 'Select files to stage using fzf with diff in preview'
quote = true

[[abbr]]
key = 'gc'
val = 'git commit'
cat = 'git'
quote = true

[[abbr]]
key = 'gca'
val = 'git commit -a'
cat = 'git'
quote = true

[[abbr]]
key = 'gpl'
val = 'git pull'
cat = 'git'
quote = true

[[abbr]]
key = 'gph'
val = 'git push'
cat = 'git'
quote = true

[[abbr]]
key = 'gs'
val = 'git show'
cat = 'git'
quote = true

[[abbr]]
key = 'gcp'
val = 'git commit && git push'
cat = 'git'
quote = true

[[abbr]]
key = 'gac'
val = 'fgit add && git commit'
cat = 'git'
quote = true

[[abbr]]
key = 'gsync'
val = 'git pull && git add . && git commit && git push'
cat = 'git'
quote = true

[[abbr]]
key = 'gco'
val = 'git checkout master'
cat = 'git'
quote = true

[[abbr]]
key = 'gcol'
val = 'git checkout $(git describe --tags $(git rev-list --tags --max-count=1))'
cat = 'git'
quote = true

[[abbr]]
key = 'gd'
val = 'git diff'
cat = 'git'
quote = true

[[abbr]]
key = 'gdf'
val = 'fgit diff'
cat = 'git'
desc = 'Open git diff in interactive fzf window'
quote = true

[[abbr]]
key = 'gst'
val = 'fgit status'
cat = 'git'
desc = 'Show modified files and diff in fzf preview window'

[[abbr]]
key = 'glog'
val = 'vim +GV'
cat = 'git'
desc = 'Open interactive git log in vim'
quote = true

[[abbr]]
key = 'gloga'
val = 'git log --oneline --decorate --graph --all'
cat = 'git'
desc = 'Show git log in terminal'
quote = true

[[abbr]]
key = 'grst'
val = 'git reset --hard origin/master'
cat = 'git'
desc = 'Overwrite local repo with remote'
quote = true

[[abbr]]
key = 'gsub'
val = 'git submodule foreach --recursive git pull origin master'
cat = 'git'
desc = 'Update all submodules recursively'
quote = true

[[abbr]]
key = 'gu'
val = '__git_fzf_git_unstage'
cat = 'git'
desc = 'Unstage file using fzf with diff preview'

[[abbr]]
key = 'grmi'
val = 'git rm --cached'
cat = 'git'
desc = 'Remove from git index but keep local filesystem copy'
quote = true

[[abbr]]
key = 'gsp'
val = 'git stash && git pull && git stash pop'
cat = 'git'
desc = 'Save local changes, pull remote changes, and add local changes on top'
quote = true

# directories {{{2
# general {{{3
[[abbr]]
key = 'h'
val = "$HOME"
cat = 'dirs'

# git repos {{{3
[[abbr]]
key = 'gpy'
val = '$HOME/git/python'
cat = 'dirs'

[[abbr]]
key = 'gpython'
val = '$HOME/git/python'
cat = 'dirs'

[[abbr]]
key = 'pysh'
val = '$HOME/git/python/shell'
cat = 'dirs'

[[abbr]]
key = 'pylib'
val = '$HOME/git/python/lib'
cat = 'dirs'

[[abbr]]
key = 'ggas'
val = '$HOME/git/google-apps-script/'
cat = 'dirs'

[[abbr]]
key = 'gdspw'
val = '$HOME/git/google-apps-script/sheets/dspw'
cat = 'dirs'

[[abbr]]
key = 'gfst'
val = '$HOME/git/google-apps-script/sheets/fs-time-dev'
cat = 'dirs'

[[abbr]]
key = 'prov'
val = '$HOME/git/provision/provision'
cat = 'dirs'

[[abbr]]
key = 'gop'
val = '$GOPATH/src/github.com/comfortablynick'
cat = 'dirs'

[[abbr]]
key = 'gog'
val = '$GOPATH/src/github.com/comfortablynick/gitprompt'
cat = 'dirs'

[[abbr]]
key = 'gprd'
val = '$HOME/git/gitpr/src'
cat = 'dirs'

[[abbr]]
key = 'cgd'
val = '$HOME/git/cgitpr/src'
cat = 'dirs'

[[abbr]]
key = 'tord'
val = '$HOME/git/todors/src'
cat = 'dirs'

# dotfiles {{{3
[[abbr]]
key = 'dot'
val = '$HOME/dotfiles/dotfiles'
cat = 'dirs'

[[abbr]]
key = 'gdot'
val = '$HOME/dotfiles/dotfiles'
cat = 'dirs'

[[abbr]]
key = 'vdot'
val = '$HOME/dotfiles/dotfiles/.vim'
cat = 'dirs'

[[abbr]]
key = 'vico'
val = '$HOME/dotfiles/dotfiles/.vim/config'
cat = 'dirs'

# fish config {{{3
[[abbr]]
key = 'fc'
val = '$XDG_CONFIG_HOME/fish'
cat = 'dirs'
desc = 'Fish dir in $XDG_CONFIG_HOME'

[[abbr]]
key = 'ffn'
val = '$XDG_CONFIG_HOME/fish/functions'
cat = 'dirs'
desc = 'Fish user functions dir'

[[abbr]]
key = 'fcm'
val = '$XDG_CONFIG_HOME/fish/completions'
cat = 'dirs'
desc = 'Fish user completions dir'

[[abbr]]
key = 'fcd'
val = '$XDG_CONFIG_HOME/fish/conf.d'
cat = 'dirs'
desc = 'Fish user config snippets'

# bash config {{{3
[[abbr]]
key = 'bcd'
val = '$XDG_CONFIG_HOME/bash/conf.d'
cat = 'dirs'
desc = 'Bash snippets dir'

[[abbr]]
key = 'bfd'
val = '$XDG_CONFIG_HOME/bash/functions'
cat = 'dirs'
desc = 'Bash functions dir'

# zsh config {{{3
[[abbr]]
key = 'zcd'
val = '$XDG_CONFIG_HOME/zsh'
cat = 'dirs'
desc = 'Zsh config dir'

[[abbr]]
key = 'zfd'
val = '$XDG_CONFIG_HOME/zsh/functions'
cat = 'dirs'
desc = 'Zsh functions dir'

# shell {{{3
[[abbr]]
key = 'sfd'
val = '$XDG_CONFIG_HOME/shell/functions'
cat = 'dirs'
desc = 'Common shell functions dir'

[[abbr]]
key = 'scd'
val = '$XDG_CONFIG_HOME/shell/conf.d'
cat = 'dirs'
desc = 'Common shell snippets dir'

[[abbr]]
key = 'spd'
val = '$XDG_CONFIG_HOME/shell/provision'
cat = 'dirs'
desc = 'Shell provisioning scripts'

# commands {{{2
# general {{{3
[[abbr]]
key = '-'
val = 'cd'
cat = 'cmds'
shell = ['fish']


[[abbr]]
key = 'pd'
val = 'prevd'
cat = 'cmds'
shell = ['fish']
desc = 'cd to previous dir'

[[abbr]]
key = 'nd'
val = 'nextd'
cat = 'cmds'
shell = ['fish']
desc = 'cd to next dir'

[[abbr]]
key = 'pd'
val = 'pushd'
cat = 'cmds'
shell = ['zsh']
desc = 'cd to previous dir'

[[abbr]]
key = 'nd'
val = 'popd'
cat = 'cmds'
shell = ['zsh']
desc = 'cd to next dir'

[[abbr]]
key = 'rmdir'
val = 'rm -rf'
cat = 'cmds'
desc = 'Remove directory and contents recursively'
quote = true

[[abbr]]
key = 'version'
val = 'cat /etc/os-release'
cat = 'cmds'
desc = 'View linux version'
quote = true

[[abbr]]
key = 'lookbusy'
val = 'cat /dev/urandom | hexdump -C | rg "ca fe"'
cat = 'cmds'
desc = 'Displays a lot of TV-like code on the screen'
quote = true

[[abbr]]
key = 'mntp'
val = 'sudo mount -t drvfs P: /mnt/p'
cat = 'cmds'
desc = 'Mount P: drive'
quote = true

# ls {{{3
[[abbr]]
key = 'ls'
val = 'command ls -h --color=auto --group-directories-first'
cat = 'ls'
shell = ['bash','zsh']
desc = 'List all files'
quote = true

[[abbr]]
key = 'lsa'
val = 'ls -ah'
cat = 'ls'
desc = 'List all files'
quote = true

[[abbr]]
key = 'la'
val = 'ls -ah'
cat = 'ls'
desc = 'List all files'
quote = true

[[abbr]]
key = 'll'
val = 'ls -lh'
cat = 'ls'
desc = 'List files in long format'
quote = true

[[abbr]]
key = 'lla'
val = 'ls -lah'
cat = 'ls'
desc = 'List all files in long format'
quote = true

# lsd {{{3
[[abbr]]
key = 'd'
val = 'lsd -al'
cat = 'lsd'
desc = 'fancy ls replacement with colors and icons'
quote = true

# exa {{{3
[[abbr]]
key = 'l'
val = 'exa -la'
cat = 'exa'
desc = 'another fancy ls replacement written in rust'
quote = true

[[abbr]]
key = 'x'
val = 'exa -la --git'
cat = 'exa'
desc = 'another fancy ls replacement written in rust -- with git status per file'
quote = true

# exit {{{3
[[abbr]]
key = 'q'
val = 'exit'
cat = 'cmds'

[[abbr]]
key = 'quit'
val = 'exit'
cat = 'cmds'

# chmod {{{3
[[abbr]]
key = 'che'
val = 'chmod +x'
cat = 'cmds'
desc = 'Assign execute permission for current user to file'
quote = true

[[abbr]]
key = 'chr'
val = 'chmod 755'
cat = 'cmds'
desc = 'Assign standard permission to file'
quote = true

# fzf {{{3
[[abbr]]
key = 'f'
val = '__fzf_find_file'
cat = 'cmds'
shell = ['fish']
quote = true

[[abbr]]
key = 'f'
val = 'fzf-tmux'
cat = 'cmds'
shell = ['bash', 'zsh']
quote = true

[[abbr]]
key = 'fe'
val = 'fzf_edit'
cat = 'cmds'
shell = ['bash', 'zsh']
desc = 'Helper script to open result in $EDITOR'

[[abbr]]
key = 'fe'
val = '__fzf_open --editor'
cat = 'cmds'
shell = ['fish']
desc = 'Helper script to open result in $EDITOR using fish script'

[[abbr]]
key = 'p'
val = 'fzf_cdhist'
cat = 'cmds'
shell = ['fish']
desc = 'FZF widget for cd history'

[[abbr]]
key = 'cf'
val = '__fzf_cd'
cat = 'cmds'
shell = ['fish']
desc = 'Use FZF to search for directory and CD'

# powerline {{{3
[[abbr]]
key = 'pr'
val = 'powerline-daemon --replace'
cat = 'cmds'
desc = 'Restart powerline daemon'
quote = true

# list.py {{{3
# [[abbr]]
# key = 'list'
# val = 'list.py'
# cat = 'cmds'
# desc = 'list.py script'
# shell = ['bash','zsh']
# quote = true
#
# [[abbr]]
# key = 'l'
# val = 'list'
# cat = 'cmds'
# desc = 'list.py'
# quote = true

[[abbr]]
key = 'listd'
val = 'list --debug'
cat = 'cmds'
desc = 'debug list.py'
quote = true

[[abbr]]
key = 'listh'
val = 'list --help'
cat = 'cmds'
desc = 'help for list.py'
quote = true

# todo.txt {{{3
[[abbr]]
key = 'todo'
val = 'todo.sh'
cat = 'cmds'
desc = 'todo.txt cli'
shell = ['bash','zsh']

[[abbr]]
key = 't'
val = ' todo'
cat = 'cmds'
desc = 'todo.sh'
quote = true

[[abbr]]
key = 'tp'
val = ' topydo'
cat = 'cmds'
desc = 'topydo.py'
quote = true

# tmux {{{3
[[abbr]]
key = 'te'
val = "vim $HOME/.tmux.conf && tmux source ~/.tmux.conf && tmux display '~/.tmux.conf sourced'"
cat = 'cmds'
desc = 'Open ~/.tmux.conf and reload after editing'
quote = true

[[abbr]]
key = 'tet'
val = "vim $HOME/.tmux.theme.conf && tmux source ~/.tmux.conf && tmux display '~/.tmux.conf sourced'"
cat = 'cmds'
desc = 'Open ~/.tmux.theme.conf and reload after editing'
quote = true

[[abbr]]
key = 'tl'
val = 'tmux ls'
cat = 'cmds'
desc = 'List tmux sessions'
quote = true

[[abbr]]
key = 'tdf'
val = 'tmux:rename_def'
cat = 'cmds'
desc = 'Rename tmux session and set VIM_SSH_COMPAT=0'
shell = ['fish']

# vim {{{3
[[abbr]]
key = 'v'
val = 'vim'
cat = 'cmds'

[[abbr]]
key = 'n'
val = 'nvim'
cat = 'cmds'

[[abbr]]
key = 'nv'
val = 'nvim'
cat = 'cmds'

[[abbr]]
key = 'vvim'
val = 'command vim'
cat = 'cmds'
desc = 'Open vim executable regardless of $EDITOR'
quote = true

[[abbr]]
key = 'vv'
val = 'command vim'
cat = 'cmds'
desc = 'Open vim executable regardless of $EDITOR'
quote = true

[[abbr]]
key = 'sv'
val = 'sudo -E $EDITOR'
cat = 'cmds'
desc = 'Open editor with root privileges but maintaining environment'
quote = true

[[abbr]]
key = 'vet'
val = 'vim $HOME/dotfiles/dotfiles/env.toml'
cat = 'cmds'
desc = 'Open env.toml in vim'
quote = true

[[abbr]]
key = 'vsp'
val = 'vim $XDG_CONFIG_HOME/shell/provision/provision'
cat = 'cmds'
desc = 'Open provision script in vim'
quote = true

# fish shell {{{3
[[abbr]]
key = 'frel'
val = 'exec fish'
cat = 'cmds'
shell = ['fish']
desc = 'Reload fish shell'
quote = true

[[abbr]]
key = 'frec'
val = 'clear; and exec fish'
cat = 'cmds'
shell = ['fish']
desc = 'Clear terminal and reload fish shell'
quote = true

[[abbr]]
key = 'funced'
val = 'funced -s'
cat = 'cmds'
shell = ['fish']
desc = 'Save function after editing'
quote = true

[[abbr]]
key = 'cm'
val = 'command'
cat = 'cmds'
shell = ['fish']
desc = 'Equivalent to `\` in bash'

[[abbr]]
key = 'fcf'
val = "vim $XDG_CONFIG_HOME/fish/config.fish"
cat = 'cmds'
desc = 'Edit config.fish in vim'
quote = true

[[abbr]]
key = 'del'
val = 'history delete'
cat = 'cmds'
shell = ['fish']
desc = 'Delete history matching pattern'
quote = true

[[abbr]]
key = 'dlast'
val = ' history delete $history[1] --exact --case-sensitive'
cat = 'cmds'
shell = ['fish']
desc = 'Delete last history item (prefixed with space to exclude this cmd from history)'
quote = true

[[abbr]]
key = 'path'
val = 'set -S PATH'
cat = 'cmds'
shell = ['fish']
desc = 'Print details of PATH variable'
quote = true

# bash {{{3
[[abbr]]
key = 'brc'
val = 'vim ~/.bashrc'
cat = 'cmds'
desc = 'Open bashrc in vim'
quote = true

[[abbr]]
key = 'mc'
val = '. mkdir_cd'
cat = 'cmds'
desc = 'Create dir and cd into it'
quote = true
shell = ['bash']

# zsh {{{3
[[abbr]]
key = 'zshc'
val = 'vim ~/.zshrc'
cat = 'cmds'
desc = 'Open zshrc in vim'
quote = true

[[abbr]]
key = 'zrel'
val = 'relz'
cat = 'cmds'
shell = ['zsh']
desc = 'Reload zsh config'

# shell {{{3
[[abbr]]
key = 'rel'
val = 'exec $SHELL -l'
cat = 'cmds'
desc = 'Reload shell and replace current instance'
quote = true

# python {{{3
[[abbr]]
key = 'denv'
val = 'source $def_venv/bin/activate.fish'
cat = 'cmds'
shell = ['fish']
desc = 'Activate default Python venv'
quote = true

[[abbr]]
key = 'denv'
val = 'source $def_venv/bin/activate'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Activate default Python venv'
quote = true

# pyenv {{{3
[[abbr]]
key = 'activate'
val = 'pyenv activate'
cat = 'cmds'
desc = 'Activate pyenv venv'
quote = true

[[abbr]]
key = 'deactivate'
val = 'pyenv deactivate'
cat = 'cmds'
desc = 'Dectivate pyenv venv'
quote = true

# general scripts {{{3
[[abbr]]
key = 'cg'
val = 'cgitpr -v'
cat = 'scripts'
desc = 'git prompt utility written in c++'
quote = true

# Aliases Only {{{1
# git {{{2
[[alias]]
key = 'git'
val = 'hub'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Wrapper for git with extra GitHub features'

# grep {{{2
[[alias]]
key = 'grep'
val = 'grep --color=auto'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Color default for grep'

[[alias]]
key = 'fgrep'
val = 'fgrep --color=auto'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Color default for fgrep'

[[alias]]
key = 'egrep'
val = 'egrep --color=auto'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Color default for grep'

# commands {{{2
[[alias]]
key = 'vim'
val = '$VISUAL'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Alias vim or nvim to `vim` command'

[[alias]]
key = 'dotdrop'
val = '~/dotfiles/dotdrop.sh'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Call dotdrop script'
