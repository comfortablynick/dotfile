# vim: set fdm=marker:
# Dein {{{
[[plugins]]
repo = 'Shougo/dein.vim'
# }}}
# Editor features {{{
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = 'NERDTreeToggle'
lazy = 1
hook_source = '''
let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = [
  \ '\.pyc$',
  \ '^__pycache__$',
  \ '.vscode'
  \ ]
let NERDTreeShowHidden = 1
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
lazy = 1
hook_source = '''
let g:undotree_WindowLayout = 4
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
on_if = '$NERD_FONTS != 0'
lazy = 1

[[plugins]]
repo = '~/.fzf'

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'Shougo/echodoc'
build = 'nvim -s +"call dein#remote_plugins()"'
hook_source = '''
let g:echodoc#type = 'signature'
set noshowmode
set shortmess+=c
call echodoc#enable()
'''
# }}}
# Formatting {{{
[[plugins]]
repo = 'ambv/black'
on_ft = 'python'
lazy = 1
hook_source = '''
let g:black_virtualenv = "~/.env/black"
'''
# }}}
# Linting {{{
[[plugins]]
repo = 'w0rp/ale'
lazy = 1
hook_source = '''
let g:ale_close_preview_on_insert = 1                           " Close preview window in INSERT mode
let g:ale_cursor_detail = 0                                     " Open preview window when focusing on error
let g:ale_echo_cursor = 1                                       " Either this or ale_cursor_detail need to be set to 1
let g:ale_cache_executable_check_failures = 1                   " Have to restart vim if adding new providers
let g:ale_lint_on_text_changed = 'never'                        " Don't lint while typing (too distracting)
let g:ale_lint_on_insert_leave = 1                              " Lint after leaving insert
let g:ale_lint_on_enter = 0                                     " Lint when opening file
let g:ale_list_window_size = 5                                  " Show # of lines of errors
let g:ale_open_list = 1                                         " Show quickfix list
let g:ale_set_loclist = 0                                       " Show location list
let g:ale_set_quickfix = 1                                      " Show quickfix list with errors
let g:ale_fix_on_save = 1                                       " Apply fixes when saving
let g:ale_echo_msg_error_str = 'E'                              " Error string prefix
let g:ale_echo_msg_warning_str = 'W'                            " Warning string prefix
let g:ale_echo_msg_format = '[%linter%] %s (%severity%%: code%)'
let g:ale_sign_column_always = 1                                " Always show column on left side, even with no errors/warnings
let g:ale_completion_enabled = 0                                " Enable ALE completion if no other completion engines
let g:ale_virtualenv_dir_names = [
    \ '.env',
    \ '.pyenv',
    \ 'env',
    \ 'dev',
    \ 'virtualenv'
    \ ]
let g:ale_linters = {
    \ 'python':
    \   [
    \     'flake8'
    \   ]
    \ }
let g:ale_fixers = {
    \ '*':
    \  [
    \    'remove_trailing_lines',
    \    'trim_whitespace'
    \  ],
    \ 'python':
    \  [
    \    'black',
    \    'autopep8',
    \    'isort',
    \  ]
    \ }

" Ale linter settings
let g:python_flake8_options = {
    \ '--max-line-length': 88
    \ }
'''
# }}}
# Color themes {{{
[[plugins]]
repo = 'morhetz/gruvbox'
merged = 0

[[plugins]]
repo = 'arcticicestudio/nord-vim'
merged = 0

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'
merged = 0

[[plugins]]
repo = 'nightsense/snow'
merged = 0
# }}}
# Syntax highlighting {{{
[[plugins]]
repo = 'HerringtonDarkholme/yats'
on_ft = 'typescript'

[[plugins]]
repo = 'gabrielelana/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'Soares/fish.vim'
on_ft = 'fish'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
# }}}
# Git {{{
[[plugins]]
repo = 'junegunn/gv.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'
# }}}
# Terminal {{{
[[plugins]]
repo = 'skywind3000/asyncrun.vim'
lazy = 1
hook_source = '''
let g:asyncrun_open = 6
let g:asyncrun_bell = 1
'''
# }}}
# Code completion {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
# build = 'nvim -s +"call dein#remote_plugins()"'
build = 'nvim -c "call dein#remote_plugins()"'
on_event = 'InsertEnter'
on_if = 'has("nvim")'
hook_source = '''
call deoplete#enable()
let g:deoplete#sources#jedi#show_docstring = 1
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
on_if = 'has("nvim")'

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
on_if = 'has("nvim")'

[[plugins]]
repo = 'mhartington/nvim-typescript'
build = './install.sh'
on_ft = ['typescript', 'tsx']
on_if = 'has("nvim")'

[[plugins]]
repo = 'Valloric/YouCompleteMe'
build = './install.py --ts-completer --clang-completer'
on_ft = ['python', 'javascript', 'typescript', 'cpp', 'c']
on_if = '!has("nvim")'
hook_source = '''
let g:ycm_filetype_blacklist = {
    \ 'gitcommit': 1,
    \ 'tagbar': 1,
    \ 'qf': 1,
    \ 'notes': 1,
    \ 'markdown': 1,
    \ 'unite': 1,
    \ 'text': 1,
    \ 'vimwiki': 1,
    \ 'pandoc': 1,
    \ 'infolog': 1,
    \ 'mail': 1
    \}
let g:ycm_filetype_specific_completion_to_disable = {
    \ 'gitcommit': 1
    \}
let g:ycm_autoclose_preview_window_after_completion = 1
'''
# }}}
# Status bar {{{
[[plugins]]
repo = 'vim-airline/vim-airline'
on_if = 'has("nvim")'
hook_source = '''
let g:airline_extensions = [
    \ 'tabline',
    \ 'ale',
    \ 'branch',
    \ 'hunks',
    \ 'wordcount',
    \ 'virtualenv'
    \ ]
let g:airline#extensions#default#section_truncate_width = {
    \ 'b': 79,
    \ 'x': 40,
    \ 'y': 48,
    \ 'z': 45,
    \ 'warning': 80,
    \ 'error': 80,
    \ }
let g:airline_powerline_fonts = 1
let g:airline_detect_spelllang = 0
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
on_if = 'has("nvim")'

[[plugins]]
repo = 'itchyny/lightline.vim'
on_if = '!has("nvim")'

[[plugins]]
repo = '/usr/local/lib/python3.7/site-packages/powerline/bindings/vim'
on_if = '!has("nvim")'

[[plugins]]
repo = 'maximbaz/lightline-ale'
on_if = '!has("nvim")'
# }}}
