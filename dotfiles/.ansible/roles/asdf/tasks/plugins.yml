---
# asdf plugins
- name: "Install asdf plugins"
  shell: >-
    . {{ asdf_dir }}/asdf.sh &&
    asdf plugin-add {{ item.name }} {{ item.repository|default() }}
  args:
    executable: "{{ asdf_install_shell|default(omit) }}"
    creates: "{{ asdf_dir }}/plugins/{{ item.name }}"
    chdir: "{{ asdf_home }}"
  loop: "{{ asdf_plugins|flatten(levels=1) }}"
  ignore_errors: True

- name: "Install asdf packages"
  shell: >-
    . {{ asdf_dir }}/asdf.sh &&
    asdf install {{ item.0.name }} {{ item.1 }}
  args:
    executable: "{{ asdf_install_shell|default(omit) }}"
    creates: "{{ asdf_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
    chdir: "{{ asdf_home }}"
  environment: "{{ item.0.environment|default(omit) }}"
  loop: "{{ asdf_plugins|subelements('versions', {'skip_missing': True}) }}"

- name: Get current asdf package versions
  shell: >-
    set -o pipefail &&
    . {{ asdf_dir }}/asdf.sh &&
    asdf current {{ item.name }} |
    grep -o '{{ item.global| default(item.versions[0]) }}'
  args:
    executable: "{{ asdf_install_shell|default(omit) }}"
    chdir: "{{ asdf_home }}"
  register: asdf_plugins_versions
  loop: "{{ asdf_plugins|flatten(levels=1) }}"
  when: item.versions is defined
  changed_when: False
  failed_when: False

- name: Set global asdf package versions
  shell: >-
    . {{ asdf_dir }}/asdf.sh &&
    asdf global {{ item.item.name }}
    {{ item.item.global|default(item.item.versions[0]) }}
  args:
    executable: "{{ asdf_install_shell|default(omit) }}"
    chdir: "{{ asdf_home }}"
  when: item.skipped is not defined and item.rc != 0
  loop: "{{ asdf_plugins_versions.results|flatten(levels=1) }}"

- name: Copy python defaults template
  template:
    src: .default-python-packages.j2
    dest: "{{ asdf_home }}/.default-python-packages"
  when: python_default_packages is defined
