#!/usr/bin/env python3
"""Add justfile actions to .tasks file for AsyncTasks vim plugin."""

import argparse
import re
import subprocess
import sys
from textwrap import dedent


def process_tasks(raw_tasks: str, output_type: str, position: str) -> list[str]:
    matches = re.findall(r"^\s+(\S+).*?(?:#([^!].*))?$", raw_tasks, flags=re.M)
    output = []
    for cmd, comment in matches:
        comment = comment.strip()
        block = dedent(
            f"""\
        [{cmd}]
        command=just {cmd}
        cwd=<root>
        output={output_type}
        pos={position}
        save=1
        """
        )
        if comment != "":
            block = f"; {comment}\n{block}"

        output.append(block)
    return output


def main():
    parser = argparse.ArgumentParser(description="Parse justfile into tasks.ini format")
    parser.add_argument(
        "--output",
        "-o",
        type=str,
        choices=["terminal", "quickfix"],
        default="terminal",
        help="Set property of 'output' for AsyncTasks (default: %(default)s)",
    )
    parser.add_argument(
        "--position",
        "-p",
        type=str,
        choices=[
            "tab",
            "curwin",
            "top",
            "bottom",
            "left",
            "right",
            "hide",
            "tmux_split",
            "floaterm",
        ],
        default="right",
        help="Position for the terminal (default: %(default)s)",
    )
    parser.add_argument(
        "outfile",
        type=str,
        nargs="?",
        help="Output tasks file (default: stdout)",
    )
    args = parser.parse_args()
    header = [
        "; vim:set fenc=utf-8 ft=dosini:",
        "; written with just2tasks",
        "",
    ]
    tasks = subprocess.run(["just", "-l"], capture_output=True)
    try:
        tasks.check_returncode()
    except subprocess.CalledProcessError as e:
        print(
            f"\x1b[1;31mError:\x1b[0m Unable to get tasks from justfile\n{e}",
            file=sys.stderr,
        )
        sys.exit(1)
    tasks = tasks.stdout.decode("utf-8")
    output = header + process_tasks(tasks, args.output, args.position)
    if args.outfile == "justfile":
        print("'justfile' may overwrite the source file! Aborting.", file=sys.stderr)
        sys.exit(1)

    try:
        with open(args.outfile, "w") as f:
            f.write("\n".join(output))
            print(f"Wrote {len(output)} commands from justfile to {f.name}")
    except TypeError:
        print(*output, sep="\n", file=sys.stdout)


if __name__ == "__main__":
    main()
