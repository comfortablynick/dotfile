#!/usr/bin/env python3
"""Parse env settings from TOML file for shells."""
import argparse  # {{{1
import hashlib
import logging
import os
import re
import shutil
import socket
import sys
from shutil import which
from datetime import datetime
from pprint import pformat
from subprocess import run
from typing import Iterator

try:
    from tomlkit import parse
except ModuleNotFoundError:
    from toml import loads as parse

# Globals {{{1
logging.basicConfig()
LOG = logging.getLogger(__name__)
RE_CMD = re.compile(r"\$\(")
RE_AND = re.compile(r" && ")
RE_SPACE = re.compile(r"\s")


# Functions {{{1
def get_file_hash(filepath: str) -> str:  # {{{2
    """Get sha hash of filepath.

    Hash can be compared to determine if changes were made to file.
    Params:
    `filepath` Path to file
    """
    # Inner function to create hash
    def update_hash(running_hash, filepath, encoding="utf-8"):
        """Update running SHA1 hash, factoring in hash of given file.

        Side Effects:
            running_hash.update()
        """
        if encoding:
            file = open(filepath, "r", encoding=encoding)
            for line in file:
                hashed_line = hashlib.sha1(line.encode(encoding))
                hex_digest = hashed_line.hexdigest().encode(encoding)
                running_hash.update(hex_digest)
            file.close()
        else:
            file = open(filepath, "rb")
            while True:
                # Read file in as little chunks.
                buffer = file.read(4096)
                if not buffer:
                    break
                running_hash.update(hashlib.sha1(buffer).hexdigest())
            file.close()

    hash_sha = hashlib.sha1()
    update_hash(hash_sha, filepath, "utf-8")
    return hash_sha.hexdigest()


def get_env_objs(toml: dict) -> Iterator[dict]:  # {{{2
    """Get dict of env objects from TOML data."""
    for k in toml.keys():
        for d in toml[k]:
            d["var_type"] = k
            yield d


def get_toml(file_path: str) -> dict:  # {{{2
    """Return toml data from file."""
    with open(file_path, "r", encoding="utf-8") as f:
        toml = parse(f.read())
    return toml


def write_shell_file(shell_vars: list, file: str) -> None:  # {{{2
    """Write settings file to disk, formatted for shell.

    Writes to stdout if no valid file is specified.
    """
    try:
        f = open(file, "w", encoding="utf-8")
    except TypeError:
        f = sys.stdout
    print(*shell_vars, sep="\n", file=f)
    f.close()


def is_shell_match(var_shell, target_shell) -> bool:  # {{{2
    """Return true if var is valid for target shell."""
    return bool(set(var_shell) & set(target_shell))


def do_eval(v: str) -> str:  # {{{2
    """Do python eval, then shell eval."""
    try:
        out = do_python_eval(v)
    except (SyntaxError, NameError):
        # Not python syntax; let the shell eval it
        out = do_shell_eval(v)
    return out


def do_python_eval(v: str) -> str:  # {{{2
    """Do python eval."""
    out = eval(v)
    LOG.debug("Python eval called on: %s; result: %s", v, out)
    return out


def do_shell_eval(v: str) -> str:  # {{{2
    """Do shell eval."""
    out = run(v, shell=True, capture_output=True).stdout.strip().decode("utf-8")
    LOG.debug("Shell eval called on: %s; result: %s", v, out)
    return out


def get_shell_vars(  # {{{2
    toml: dict, shell: str, print_comments: bool = False
) -> list:
    """Get shell script to create vars for given shell.

    Params:
    `toml` TOML loaded from file
    `shell` Shell to get config for
    `print_comments` Print description as comment
    """
    var_defs = {
        "fish": {
            "abbr": {"format": "abbr {0} {1} {2} {3}", "default_args": "-U"},
            "alias": {
                "format": "function {1} {0}; {2}; end; and funcsave {1} {3}",
                "default_args": "",
            },
            "env": {"format": "set {0} {1} {2} {3}", "default_args": "-Ux"},
            "path": {"format": "set {0} {1} {2} {3}", "default_args": "-U --path"},
        },
        "bash": {
            "abbr": {"format": "alias {1}={2} {3}", "default_args": ""},
            "alias": {"format": "alias {1}={2} {3}", "default_args": ""},
            "env": {"format": "export {1}={2} {3}", "default_args": ""},
            "path": {"format": "export PATH={2}:$PATH {3}", "default_args": ""},
        },
        "zsh": {
            "abbr": {"format": "alias {1}={2} {3}", "default_args": ""},
            "alias": {"format": "alias {1}={2} {3}", "default_args": ""},
            "env": {"format": "export {1}={2} {3}", "default_args": ""},
            "path": {"format": "export PATH={2}:$PATH {3}", "default_args": ""},
        },
    }
    all_vars = []
    for var in get_env_objs(toml):
        if (
            is_shell_match(var.get("shell", ["common"]), (shell, "common"))
            and var.get("host", socket.gethostname()) == socket.gethostname()
        ):
            var_def = var_defs[shell][var["var_type"]]
            k = var.get("key")
            a = var.get("args", var_def.get("default_args"))
            eval = var.get("eval")
            # shell_eval = var.get("shell_eval")
            quote = var.get("quote")
            test = var.get("if")

            if test is not None and not do_eval(test):
                continue

            if isinstance(var["val"], list):
                # Probably path array
                v = " ".join(map(str, var["val"]))
            else:
                v = str(var.get("val"))

            if quote is not False and not eval:
                if quote or RE_SPACE.search(v):
                    v = repr(v)

            # Convert posix subshell `$()` to fish `()`
            # Convert posix `&&` to fish `; and`
            if shell == "fish":
                v = RE_CMD.sub("(", str(v))
                v = RE_AND.sub("; and ", str(v))

            if eval:
                v = do_eval(v)

            if var["var_type"] == "path":
                if os.path.isdir(os.path.expandvars(v)):
                    if shell == "fish":
                        k = "fish_user_paths"
                    elif shell in ("bash", "zsh"):
                        k = "PATH"
                else:
                    LOG.info("'%s' is not a valid directory", v)
                    continue

            desc = var.get("desc")
            c = f"# {desc}" if print_comments and desc else ""
            # Remove extra whitespace
            str_out = " ".join(var_def["format"].format(a, k, v, c).split())
            all_vars.append(str_out)
    return all_vars


def process_args(args: list):  # {{{2
    """Parse command line input."""
    parser = argparse.ArgumentParser(
        prog="parse_env", description="parse shell environment from TOML config file"
    )
    parser.add_argument(
        "input_file",
        metavar="INPUT",
        action="store",
        help="Parse environment from this TOML file",
    )
    parser.add_argument(
        "output_file",
        metavar="OUTPUT",
        action="store",
        nargs="?",
        default=None,
        help="Save output in this file, otherwise print to stdout",
    )
    parser.add_argument(
        "-d", "--debug", action="count", help="Print debug info to terminal", default=0,
    )
    parser.add_argument(
        "-c",
        "--print-comments",
        action="store_true",
        help="print description as comment for each item",
    )
    parser.add_argument(
        "-s",
        "--shell",
        action="store",
        choices=["fish", "bash", "zsh"],
        help="Shell syntax for output [fish,bash,zsh] (default $SHELL)",
        metavar="SHELL",
        default=os.path.basename(os.environ.get("SHELL")),
    )
    return parser.parse_args(args)


def main():  # {{{2
    """Script entry point."""
    try:
        sys.argv[1]
        cli_args = sys.argv[1:]
    except IndexError:
        cli_args = [os.path.expanduser("~/dotfiles/env.toml"), "-dd"]
    finally:
        args = process_args(cli_args)

    # Set up logger
    if args.debug == 0:
        LOG.setLevel(logging.WARNING)
    elif args.debug == 1:
        LOG.setLevel(logging.INFO)
    else:
        LOG.setLevel(logging.DEBUG)
    LOG.debug(args)

    toml = get_toml(args.input_file)
    LOG.debug(pformat(toml))

    shell_vars = get_shell_vars(toml, args.shell, args.print_comments)

    # Prepend header
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # shell_vars.insert(0, f"#!/usr/bin/env {args.shell}")
    shell_vars.insert(0, f"# File generated from env.toml: {timestamp}")

    # write to file and/or stdout
    if args.output_file:
        write_shell_file(shell_vars=shell_vars, file=args.output_file)
    else:
        write_shell_file(shell_vars=shell_vars, file=None)


# Run {{{2
if __name__ == "__main__":
    main()

# vim:fdl=99:
