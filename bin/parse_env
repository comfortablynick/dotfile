#!/usr/bin/env python3
"""Parse env settings from TOML file for shells."""
import argparse  # {{{1
import hashlib
import logging
import os
import re
import socket
import subprocess
import sys
from datetime import datetime
from pprint import pformat
from typing import Any, Iterator, List, MutableMapping, Optional
from rtoml import loads

# Globals {{{1
logging.basicConfig(level=logging.CRITICAL)
LOG = logging.getLogger(__name__)
RE_CMD = re.compile(r"\$\(")
RE_AND = re.compile(r" && ")
RE_SPACE = re.compile(r"\s")
TomlDocument = MutableMapping[str, Any]


def get_file_hash(filepath: str) -> str:  # {{{1
    """Get sha hash of filepath.

    Hash can be compared to determine if changes were made to file.
    Params:
    `filepath` Path to file
    """
    # Inner function to create hash
    def update_hash(running_hash, filepath, encoding="utf-8"):
        """Update running SHA1 hash, factoring in hash of given file.

        Side Effects:
            running_hash.update()
        """
        if encoding is not None:
            with open(filepath, "r", encoding=encoding) as file:
                for line in file:
                    hashed_line = hashlib.sha1(line.encode(encoding))
                    hex_digest = hashed_line.hexdigest().encode(encoding)
                    running_hash.update(hex_digest)
        else:
            with open(filepath, "rb") as file:
                while True:
                    # Read file in as little chunks.
                    buffer = file.read(4096)
                    if not buffer:
                        break
                    running_hash.update(hashlib.sha1(buffer).hexdigest())

    hash_sha = hashlib.sha1()
    update_hash(hash_sha, filepath, "utf-8")
    return hash_sha.hexdigest()


def get_log_level(verbosity: int) -> int:
    levels = {
        0: logging.ERROR,
        1: logging.WARN,
        2: logging.INFO,
        3: logging.DEBUG,
    }
    return levels.get(verbosity, logging.DEBUG)


def get_env_objs(toml: TomlDocument) -> Iterator[dict]:  # {{{1
    """Get dict of env objects from TOML data."""
    for k in toml.keys():
        for d in toml[k]:
            d["var_type"] = k
            yield d


def get_toml(file_path: str) -> TomlDocument:  # {{{1
    """Return toml data from file."""
    with open(file_path, "r", encoding="utf-8") as f:
        toml = parse(f.read())
    return toml


def output_to_pager(text: List[str], syntax: Optional[str] = None) -> None:
    """Write output to stdin of pager."""
    cmd = ["bat"]
    if syntax is not None:
        cmd = cmd + ["-l", syntax]
    try:
        # args stolen fron git source, see `man less`
        pager = subprocess.Popen(
            cmd,
            stdin=subprocess.PIPE,
            stdout=sys.stdout,
        )
        for line in text:
            pager.stdin.write(line.encode())
        pager.stdin.close()
        pager.wait()
    except KeyboardInterrupt:
        pass


def write_shell_file(shell_vars: list, file: Optional[str]) -> None:  # {{{2
    """Write settings file to disk, formatted for shell.

    Writes to stdout if no valid file is specified.
    """
    if file is not None:
        f = open(file, "w", encoding="utf-8")
    else:
        f = sys.stdout
    print(*shell_vars, sep=os.linesep, file=f)
    f.close()


def is_shell_match(var_shell, target_shell) -> bool:  # {{{1
    """Return true if var is valid for target shell."""
    return bool(set(var_shell) & set(target_shell))


def do_shell_eval(v: str) -> subprocess.CompletedProcess:  # {{{1
    """Do shell eval."""
    result = subprocess.run(v, shell=True, capture_output=True, timeout=0.5)
    LOG.debug("Shell eval called on: %s; result: %s", v, result)
    return result


def get_shell_vars(  # {{{1
    toml: TomlDocument, shell: str, print_comments: bool = False
) -> list:
    """Get shell script to create vars for given shell.

    Params:
    `toml` TOML loaded from file
    `shell` Shell to get config for
    `print_comments` Print description as comment
    """
    var_defs = {
        "fish": {
            "abbr": {"format": "abbr {0} {1} {2} {3}", "default_args": "-U"},
            "alias": {
                "format": "function {1} {0}; {2}; end; and funcsave {1} {3}",
                "default_args": "",
            },
            "env": {"format": "set {0} {1} {2} {3}", "default_args": "-Ux"},
            "path": {"format": "fish_add_path {0} {2} {3}", "default_args": ""},
        },
        "bash": {
            "abbr": {"format": "alias {1}={2} {3}", "default_args": ""},
            "alias": {"format": "alias {1}={2} {3}", "default_args": ""},
            "env": {"format": "export {1}={2} {3}", "default_args": ""},
            "path": {"format": "export PATH={2}:$PATH {3}", "default_args": ""},
        },
        "zsh": {
            "abbr": {"format": "alias {1}={2} {3}", "default_args": ""},
            "alias": {"format": "alias {1}={2} {3}", "default_args": ""},
            "env": {"format": "export {1}={2} {3}", "default_args": ""},
            "path": {"format": "export PATH={2}:$PATH {3}", "default_args": ""},
        },
    }
    all_vars = []
    for var in get_env_objs(toml):
        if (
            is_shell_match(var.get("shell", ["common"]), (shell, "common"))
            and var.get("host", socket.gethostname()) == socket.gethostname()
        ):
            var_def = var_defs[shell][var["var_type"]]
            k = var.get("key")
            a = var.get("args", var_def.get("default_args"))
            eval = var.get("eval")
            quote = var.get("quote")
            test = var.get("if")

            if test is not None and do_shell_eval(test).returncode != 0:
                continue

            if isinstance(var["val"], list):
                # Probably path array
                v = " ".join(map(str, var["val"]))
            else:
                v = str(var.get("val"))

            if quote is not False and not eval:
                if quote or RE_SPACE.search(v):
                    v = repr(v)

            if eval:
                v = do_shell_eval(v).stdout.rstrip().decode("utf-8")

            # Convert posix subshell `$()` to fish `()`
            # Convert posix `&&` to fish `; and`
            if shell == "fish":
                v = RE_CMD.sub("(", str(v))
                v = RE_AND.sub("; and ", str(v))

            if var["var_type"] == "path" and not os.path.isdir(os.path.expandvars(v)):
                LOG.warning("'%s' is not a valid directory", v)
                continue

            desc = var.get("desc")
            c = f"# {desc}" if print_comments and desc else ""
            # Remove extra whitespace
            str_out = " ".join(var_def["format"].format(a, k, v, c).split())
            all_vars.append(str_out + os.linesep)
    return all_vars


def build_parser() -> argparse.ArgumentParser:  # {{{1
    """Build command line parser."""
    parser = argparse.ArgumentParser(
        description="parse shell environment from TOML config file",
        formatter_class=argparse.RawTextHelpFormatter,
        add_help=False,
    )
    parser.add_argument(
        "input",
        type=argparse.FileType("r"),
        nargs="?",
        default="-",
        help=(
            "Parse environment from this TOML file,"
            " or from stdin (default: %(default)s)"
        ),
    )
    parser.add_argument(
        "output",
        type=argparse.FileType("w"),
        nargs="?",
        default="-",
        help="Save output to this file, or stdout (default: %(default)s)",
    )
    parser.add_argument(
        "-h",
        action="store_true",
        dest="show_help",
        help="Show this help message and exit",
    )
    parser.add_argument(
        "-c",
        action="store_true",
        dest="print_comments",
        help="Print description as comment for each item",
    )
    parser.add_argument(
        "-p",
        action="store_true",
        dest="use_pager",
        help="Use pager for stdout output",
    )
    parser.add_argument(
        "-s",
        dest="shell",
        choices=["fish", "bash", "zsh"],
        help="Shell syntax for output [fish,bash,zsh] (default: $SHELL)",
        metavar="SHELL",
        default=os.path.basename(os.getenv("SHELL", default="/bin/bash")),
    )
    parser.add_argument(
        "-v",
        action="count",
        dest="verbosity",
        help="Print debug info to terminal; supply multiple times for more verbosity",
        default=0,
    )
    parser.add_argument(
        "-q",
        action="store_true",
        dest="quiet",
        help="Silence debug output (overrides -v)",
    )
    return parser


def main():  # {{{1
    """Script entry point."""
    test_mode = True
    parser = build_parser()
    args = parser.parse_args()

    if args.show_help:
        parser.print_help(file=sys.stderr)
        parser.exit(1)

    # Set up logger
    if not args.quiet:
        LOG.setLevel(get_log_level(args.verbosity))
    LOG.info("Parsed args: %s", args)

    if args.input is None:
        if not sys.stdin.isatty():
            args.input = sys.stdin
        else:
            # TODO: remove after test
            if test_mode:
                args.input = open(os.path.expanduser("~/env.toml"))
            else:
                print(
                    "Error: no input detected.",
                    "Pass toml through stdin or file input argument.",
                    file=sys.stderr,
                )
                parser.print_usage(file=sys.stderr)
                parser.exit(1)
    toml = loads(args.input.read())
    args.input.close()
    LOG.debug(pformat(toml))

    shell_vars = get_shell_vars(toml, args.shell, args.print_comments)

    # Prepend header
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    shell_vars.insert(
        0, f"# File generated from {args.input.name}: {timestamp}{os.linesep}"
    )

    # write to file or stdout
    if args.use_pager:
        output_to_pager(shell_vars, syntax=args.shell)
    else:
        args.output.writelines(shell_vars)
    args.output.close()


# Run {{{1
if __name__ == "__main__":
    main()

# vim:fdl=99:
