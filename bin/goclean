#!/bin/bash
# Remove traces of something installed with `go get`
set -e
# set -u
set -o pipefail

unset NOOP

err() {
    printf "\e[1;31merror: %s\e[0m\n" "$@" >&2
}

goclean() {
    local pkg=$1
    shift || { err "PACKAGE required" && usage; }
    local ost
    local cnt
    local params=()

    params+=(-i)

    if [[ $NOOP -eq 1 ]]; then
        echo "info: displaying commands only due to -n"
        params+=(-n)
    fi

    printf "Performing \`go clean\` for %s...\n" "$pkg"
    # Clean removes object files from package source directories (ignore error)
    go clean "${params[@]}" "$pkg"

    echo "done with \`go clean\`"

    if [[ $NOOP -eq 1 ]]; then
        echo "run again without -n to also delete source directories"
        return
    fi

    # Set local variables
    [[ "$(uname -m)" == "x86_64" ]] &&
        ost="$(uname)"
    ost="${ost,,}_amd64" &&
        cnt="${pkg//[^\/]/}"

    printf "Deleting source directories for %s..." "$pkg"
    # Delete the source directory and compiled package directory(ies)
    if (("${#cnt}" == "2")); then
        rm -rf "${GOPATH%%:*}/src/${pkg%/*}"
        rm -rf "${GOPATH%%:*}/pkg/${ost}/${pkg%/*}"
    elif (("${#cnt}" > "2")); then
        rm -rf "${GOPATH%%:*}/src/${pkg%/*/*}"
        rm -rf "${GOPATH%%:*}/pkg/${ost}/${pkg%/*/*}"
    fi
    printf "done\n"
}

usage() {
    printf "usage: %s [-n] PACKAGE\n%s\n%s\n" "$(basename "$0")" \
        "options:" \
        "   -n  Print commands from \`go clean\` only, but don't execute" \
        >&2
    exit 1
}

while getopts 'nh' c; do
    case $c in
    n) NOOP=1 ;;
    h | ?) usage ;;
    esac
done
shift "$((OPTIND - 1))"
goclean "$@"
