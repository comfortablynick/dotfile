---
# neovim build tasks
- name: Neovim | Clone Neovim git repo
  git:
    repo: https://github.com/neovim/neovim.git
    dest: "{{ neovim_source_dir }}"
    force: true
    accept_hostkey: true
  register: source_repo

- name: Neovim | Get installed version
  command: nvim --version
  register: neovim_installed_version
  changed_when: false

- name: Neovim | Set version strings
  set_fact:
    neovim_installed_sha: "{{ neovim_installed_version.stdout_lines[0][-9:] }}"
    neovim_master_sha: "{{ source_repo.after[:9] }}"

- name: Neovim | Debug version strings
  debug:
    msg: |-
      Neovim installed sha:  {{ neovim_installed_sha }}
      Neovim repo clone sha: {{ neovim_master_sha }}

- name: Neovim | Build from source
  block:
    - name: Neovim | Install build prerequisites
      become: true
      apt:
        name: "{{ Debian_neovim_required_packages }}"
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Neovim | Clean previous build artifacts
      command:
        cmd: make distclean
        chdir: "{{ neovim_source_dir }}"
      when: neovim_force

    - name: Neovim | Build and install
      command:
        cmd: "{{ item }} CMAKE_BUILD_TYPE={{ neovim_cmake_build_type }} CMAKE_INSTALL_PREFIX={{ neovim_install_prefix }}"
        chdir: "{{ neovim_source_dir }}"
      loop:
        - make
        - make install

    # Delete unused theme files (why not?)
    - name: Neovim | Find factory theme files other than default
      find:
        paths: "{{ neovim_install_prefix }}/share/nvim/runtime/colors"
        file_type: file
        excludes:
          - default.vim
      register: found_files

    - name: Neovim | Remove all but default theme
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ found_files['files'] }}"

  when: (neovim_installed_sha != neovim_master_sha) or neovim_force
