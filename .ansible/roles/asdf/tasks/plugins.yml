---
# asdf plugins
- name: Install asdf plugins
  command: "{{ asdf_bin }} plugin-add {{ item.name }} {{ item.repository|d() }}"
  args:
    creates: "{{ asdf_dir }}/plugins/{{ item.name }}"
    chdir: "{{ asdf_home }}"
  loop: "{{ asdf_plugins|flatten(levels=1) }}"
  ignore_errors: true

# Plugin-specific tasks go here
- name: Include tasks for nodejs
  include_tasks: plugins/nodejs.yml
  loop: "{{ asdf_plugins|flatten(levels=1) }}"
  when: '"nodejs" in item["name"]'

- name: Include tasks for python
  include_tasks: plugins/python.yml
  loop: "{{ asdf_plugins|flatten(levels=1) }}"
  when: '"python" in item["name"]'

# Install binaries using plugins
- name: Install asdf packages
  command: "{{ asdf_bin }} install {{ item.0.name }} {{ item.1 }}"
  args:
    creates: "{{ asdf_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
    chdir: "{{ asdf_home }}"
  environment: "{{ item.0.environment|d(omit) }}"
  loop: "{{ asdf_plugins|subelements('versions', {'skip_missing': True}) }}"

# TODO: debug this when changing version next time
# Consider using `asdf which` and build dict of versions
- name: Get current asdf package versions
  shell: >-
    set -o pipefail
    asdf current {{ item.name }} |
    grep -o '{{ item.global| d(item.versions[0]) }}'
  args:
    executable: "{{ asdf_install_shell|d(omit) }}"
    chdir: "{{ asdf_home }}"
  register: asdf_plugins_versions
  loop: "{{ asdf_plugins|flatten(levels=1) }}"
  when: item.versions is defined
  changed_when: false
  failed_when: false

- name: Debug package versions
  debug:
    var: "{{ asdf_plugins_versions.results }}"
    verbosity: 1

# TODO: this doesn't work because variable isn't set properly in loop above
- name: Set global asdf package versions
  command: >-
    "{{ asdf_bin }} global {{ item.item.name }}
    {{ item.item.global|d(item.item.versions[0]) }}"
  when: item.skipped is undefined and item.rc != 0
  loop: "{{ asdf_plugins_versions.results|flatten(levels=1) }}"
