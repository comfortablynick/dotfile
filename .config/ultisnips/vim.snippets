# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.  r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
global !p
from pathlib import PurePath
def file_relative_path(remove_file_ext = False):
	"""Return path of current file relative to .vim directory."""
	path = vim.eval(f'expand(\'%:p{":r" if remove_file_ext else ""}\')')
	fp = PurePath(path)
	return fp.relative_to(os.path.expandvars("$VDOTDIR"))
endglobal

# Author:   ${1:`!v g:snippets_author`} <${2:`!v g:snippets_author_email`}>
snippet doc "Script documetation" b
" ====================================================
" Filename:    `!p snip.rv = str(file_relative_path())`
" Description: ${1}
" Author:      Nick Murphy (comfortablynick@gmail.com)
" License:     MIT
" ====================================================$0
endsnippet

snippet scriptguard "script reinclusion guard" b
let s:guard = 'g:loaded_`!p
if not snip.c:
	relpath = file_relative_path(True)
	relpath = '_'.join(os.path.split(relpath))
	relpath = re.sub(r'[^A-Za-z0-9]+','_', relpath)
	snip.rv = relpath
else:
	snip.rv = snip.c`' | if exists(s:guard) | finish | endif
let {s:guard} = 1$0
endsnippet

# Uses unique string so guards aren't duplicated easily
snippet rscriptguard "randomized script reinclusion guard" b
if exists('${1:g:loaded_`!p
if not snip.c:
	import random, string
	relpath = file_relative_path(True)
	relpath = '_'.join(os.path.split(relpath))
	relpath = re.sub(r'[^A-Za-z0-9]+','_', relpath)
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8)).lower()
	snip.rv = '%s_%s' % (relpath,rand)
else:
	snip.rv = snip.c`}') | finish | endif
let $1 = 1$0
endsnippet

snippet fu "function" b
function ${1:FunctionName}($2)
    $0
endfunction
endsnippet

snippet fua "autoload function" b
function `!p
relpath = PurePath(file_relative_path(True))
parts = relpath.parts
snip.rv = '#'.join(parts[1:]) + '#'
`${1:name}($2)
	$0
endfunction
endsnippet

snippet filetype_detect "filetype detection boilerplate" b
" vint: -ProhibitAutocmdWithNoGroup

autocmd BufRead,BufNewFile ${1:filename_pattern} call s:set_filetype()

function! s:set_filetype() abort
    if &filetype !=# '${2:filetype}'
        set filetype=$2
    endif
endfunction
endsnippet

snippet cabbr "save command abbr"
cnoreabbrev <expr> ${1:abbr}
    \ util#cabbr('$1', '$2')
endsnippet
