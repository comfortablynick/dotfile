# vim: set ft=tmux fdm=marker:

# General {{{1
# Terminal
set -g default-terminal "tmux-256color"
set -sa terminal-overrides ",xterm-256color:RGB"                  # utf8/color hack
set -g xterm-keys on                                            # auto scroll mode in xterms
set -g history-limit 5000                                       # increase history
set -sg escape-time 10                                          # Recommended by Neovim
set -g repeat-time 200                                          # How long it waits for repeat (def. 500)
set -g destroy-unattached off
set -g focus-events on                                          # Allow vim to detect FocusLost/FocusGained

# Reload .tmux.conf in place
bind-key r source $XDG_CONFIG_HOME/tmux/tmux.conf \; display-message "Conf reloaded..."

# Display {{{1
# numbering {{{2
set -g base-index 0                                             # start windows numbering at n
set -g renumber-windows off                                     # renumber windows when a window is closed
setw -g pane-base-index 0                                       # start pane numbering at n

setw -g aggressive-resize on                                    # allow different client sizes

# titles {{{2
set -g set-titles on                                            # set terminal title
setw -g automatic-rename on                                     # rename window to reflect current program

set -g display-panes-time 800                                   # slightly longer pane indicators display time
set -g display-time 1000                                        # slightly longer status messages display time

# clear screen {{{2
bind-key C-l send-keys 'C-l'

# activity
set -g monitor-activity on
set -g activity-action none

# cursor
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'

# Prefix keys {{{1
# Use <CTRL>+a as command prefix
unbind-key C-a
set-option -g prefix C-a
bind-key C-a send-prefix

# Use '\' as alternate prefix
# unbind-key \\
# set-option -g prefix2 \\
# bind-key \\ send-prefix -2

# Navigation {{{1
# splitting
# unbind-key '"'
# unbind-key '%'
bind-key v split-window -h -c "#{pane_current_path}"
bind-key V split-window -v -c "#{pane_current_path}"

# pane resizing (reset with M-1/M-2)
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5

# window vi-style navigation
bind-key -r h previous-window                                       # identical to `n`
bind-key -r l next-window                                           # identical to `p`
bind-key Tab last-window                                            # move to last active window

# smart pane switching with awareness of vim splits
# needs vim-tmux-navigator plugin christoomey/vim-tmux-navigator
is_vim="case $(tmux display-message -p '#{pane_current_command}') in *vim) true;; *) false;; esac"
bind-key -n C-h   if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j   if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k   if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l   if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-'\' if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# bind-key -n C-'\' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Move windows left or right
bind-key -r C-H swap-window -t -1
bind-key -r C-L swap-window -t +1

# kill current pane/window
bind-key x confirm-before kill-pane
bind-key X confirm-before kill-window

# Copy mode {{{1
# set-clipboard on
# Vim style shortcuts
setw -g mode-keys vi
unbind-key [
unbind-key ]
bind-key Escape copy-mode

run -b 'tmux bind-key -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind-key -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind-key -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind-key -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind-key -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind-key -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind-key -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind-key -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind-key -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind-key -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind-key -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind-key -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# pane switching
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-'\' select-pane -l

# Mouse mode {{{1
set -g mouse on

# make scrolling with wheels work
bind-key -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind-key -n WheelDownPane select-pane -t= \; send-keys -M

# Toggle mouse mode on or off
bind-key m set -g mouse on \; display 'Mouse: ON'
bind-key M set -g mouse off \; display 'Mouse: OFF'

# Status bar {{{1
set -g status-interval 2
set -g status-position bottom


# Source theme file or powerline config
if-shell "[ -f $XDG_CONFIG_HOME/tmux/tmux.theme.conf ]" \
    "source $XDG_CONFIG_HOME/tmux/tmux.theme.conf"

# Nested sessions {{{3
# Toggle keys to remote session on F12
bind-key -T root F12  \
    set -g status-position top \;\
    set prefix None \;\
    set key-table off \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;

bind-key -T off F12 \
    set -g status-position bottom \;\
    set -u prefix \;\
    set -u key-table \;\
    set -u status-style \;\
    refresh-client -S \;

# Plugins {{{1
# TMUX plugin manager download {{{2
if "test ! -d ~/.tmux/plugins/tpm" \
       "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# List of plugins {{{2
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf) {{{2
run '~/.tmux/plugins/tpm/tpm'
