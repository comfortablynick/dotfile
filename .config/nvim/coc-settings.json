{
  // Diagnostics
  "diagnostic.enable": true,
  "diagnostic.errorSign": ">>",
  "diagnostic.hintSign": ">>",
  "diagnostic.infoSign": "i",
  "diagnostic.warningSign": "--",
  "diagnostic.checkCurrentLine": true,
  "diagnostic.messageTarget": "float",
  "diagnostic.refreshAfterSave": false,
  "diagnostic.refreshOnInsertMode": true,
  "diagnostic.virtualText": true,
  "diagnostic.enableMessage": "always",
  "diagnostic.virtualTextCurrentLineOnly": false,

  // git
  "git.branchCharacter": "",

  // diagnostic-languageserver
  "diagnostic-languageserver.enable": true,
  "diagnostic-languageserver.filetypes": {
    "vim": "vint",
    "email": "languagetool",
    "markdown": [ "write-good", "markdownlint" ],
    "sh": "shellcheck"
  },

  "diagnostic-languageserver.linters": {
    // Override shellcheck to use file instead of stdin
    // Not ideal, but I don't want to have to use a directive to specify shell
    "shellcheck": {
      "command": "shellcheck",
      "debounce": 100,
      "args": [
        "--format",
        "json",
        "%filepath"
      ],
      "sourceName": "shellcheck",
      "parseJson": {
        "line": "line",
        "column": "column",
        "endLine": "endLine",
        "endColumn": "endColumn",
        "message": "${message} [${code}]",
        "security": "level"
      },
      "securities": {
        "error": "error",
        "warning": "warn",
        "info": "info",
        "style": "hint"
      }
    }
  },

  // Suggestion options
  "suggest.echodocSupport": false,
  "suggest.triggerCompletionWait": 100,
  "suggest.enablePreview": true,
  "suggest.keepCompleteopt": false,
  "suggest.labelMaxLength": 80,
  "suggest.floatEnable": true,

  // Signature
  "signature.target": "float",

  // Preferences
  "coc.preferences.hoverTarget": "float",
  "coc.preferences.previewAutoClose": true,
  "coc.preferences.formatOnType": false,
  "coc.preferences.formatOnInsertLeave": false,
  "coc.preferences.messageLevel": "error",
  "coc.preferences.currentFunctionSymbolAutoUpdate": true,
  "coc.preferences.formatOnSaveFiletypes": ["rust"],

  // Snippets
  "snippets.userSnippetsDirectory": "~/.config/ultisnips",

  // Rust
  "rust-analyzer.rustfmt.extraArgs": ["+nightly"],
  "rust-analyzer.inlayHints.chainingHints": true,

  // Python
  "python.linting.enabled": true,
  "python.jediEnabled": false,
  "python.linting.mypyEnabled": true,
  "python.linting.pydocstyleEnabled": true,
  "python.linting.flake8Enabled": true,
  "python.linting.pylintEnabled": false,
  "python.linting.flake8Args": ["--max-line-length=100"],
  "python.formatting.provider": "black",

  // Vim
  "vimlsp.indexes.runtimepath": false,

  // Typescript
  "tsserver.reportStyleChecksAsWarnings": true,
  "tslint.autoFixOnSave": true,
  "tslint.suppressWhileTypeErrorsPresent": true,

  // YAML
  "yaml.format.enable": true,
  "yaml.validate": false,
  "yaml.schemas": {
    "http://json.schemastore.org/ansible-stable-2.9": "*"
  },
  "yaml.trace.server": "verbose",

  // Server definitions
  "languageserver": {
    "ccls": {
      "command": "ccls",
      "filetypes": ["c", "c.doxygen", "cpp", "cuda", "objc", "objcpp"],
      "rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/"],
      "initializationOptions": {
        "cache": {
          "directory": "/tmp/ccls",
          "retainInMemory": 1
        }
      }
    },
    "bash": {
      "command": "bash-language-server",
      "args": ["start"],
      "filetypes": ["sh", "bash"],
      "ignoredRootPaths": ["~"]
    },
    "golang": {
      "command": "gopls",
      "args": [],
      "rootPatterns": ["go.mod", ".vim/", ".git/", ".hg/"],
      "filetypes": ["go"]
    },
    "lua-language-server": {
      "command": "lua-language-server",
      "filetypes": ["lua"]
    }
  },

  // "Lua": {
  //   "runtime": {
  //     "version": "LuaJIT"
  //   },
  //   "diagnostics": {
  //     "globals":
  //     [
  //       "vim",
  //       "nvim"
  //     ]
  //   }
  // },

    // Explorer
    "explorer.icon.enableVimDevicons": true,
    "explorer.icon.enableNerdfont": true,
    "explorer.quitOnOpen": true,
    "explorer.keyMappings": {
      "s": "open:vsplit"
    },
    "explorer.file.showHiddenFiles": true
}
